{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "GC25m_pwhjkp"
   },
   "source": [
    "**N-Queens Problem using Genetic Programming:**\n",
    "\n",
    "The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other; thus, a solution requires that no two queens share the same row, column, or diagonal. \n",
    "\n",
    "The challenge is to generate one right sequence through ***Genetic Programming***. The sequence has to be 8 numbers between 0 to 7. Each number represents the positions the Queens can be placed.\n",
    "\n",
    "Each number refers to the row number in the specific column\n",
    "\n",
    "[ 0\t3\t4\t5\t6\t1\t2\t4 ]\n",
    "\n",
    "•\t0 is the row number in the column 0 where the Queen can be placed\n",
    "\n",
    "•\t3 is the row number in the column 1 where the Queen can be placed\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "sis0TjOLjoPJ"
   },
   "source": [
    "Importing required libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "5aF_gQKUjjl8"
   },
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "from random import randint as randInt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CwcM7twDju8E"
   },
   "source": [
    "Creating a Gene class containing the specific gene and its corresponding score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "c-04NxdYjzQt"
   },
   "outputs": [],
   "source": [
    "class GenePool:\n",
    "    def __init__(self, gene, score):\n",
    "        self.gene = gene\n",
    "        self.score = score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "uzC4NL8TkY1U"
   },
   "source": [
    "Define the initial population as the base population to start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Bcpma1iRkX01"
   },
   "outputs": [],
   "source": [
    "def initialPopulation():\n",
    "    population = []\n",
    "    for i in range(25):\n",
    "        np.random.seed(i)\n",
    "        r_list = np.random.randint(0, 7, 8)\n",
    "        population.append(r_list.tolist())\n",
    "    return population"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gYKQmzzzk1E9"
   },
   "source": [
    "Define the Fitness function that will mark the completion of program upon satisfying the fitness condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ef_DTbxbk0DU"
   },
   "outputs": [],
   "source": [
    "def calcFitness(population):\n",
    "    pool = []\n",
    "    for p in population:\n",
    "        scr = _calcFitness_util(p)\n",
    "        if sum(scr) == 28:\n",
    "            return (1,p)\n",
    "        pool.append(GenePool(p, sum(scr)))\n",
    "    return (0,pool)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "9_TTZqlLlPXU"
   },
   "source": [
    "Helper fitness function to calculate the score of each gene (parent) and return the score to fitness function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "n1GwCv31lOGQ"
   },
   "outputs": [],
   "source": [
    "def _calcFitness_util(parent):\n",
    "    n = len(parent)\n",
    "    res = []\n",
    "    q = 8\n",
    "    for i in range(n):\n",
    "        row = parent[i]\n",
    "        col = i\n",
    "        hit = 0\n",
    "        for r in range(col+1, n):\n",
    "            if (parent[r] == row):\n",
    "                hit += 1\n",
    "        new_r = row\n",
    "        new_c = col\n",
    "        while (new_r >= 0 and new_c >= 0 and new_r < n and new_c < n):\n",
    "            if (new_r != row and new_c != col and parent[new_c] == new_r):\n",
    "                hit += 1\n",
    "            new_r += 1\n",
    "            new_c += 1\n",
    "        new_r = row\n",
    "        new_c = col\n",
    "        while (new_r >= 0 and new_c >= 0 and new_r < n and new_c < n):\n",
    "            if (new_r != row and new_c != col and parent[new_c] == new_r):\n",
    "                hit += 1\n",
    "            new_r -= 1\n",
    "            new_c += 1\n",
    "        q -= 1\n",
    "        res.append(q-hit)\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4-ToDQcQltUl"
   },
   "source": [
    "Crossover function to combine the genes (parents) to create new genes (children)\n",
    "\n",
    "**One point Crossover** used here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "2ZoI4jhwlsdw"
   },
   "outputs": [],
   "source": [
    "def crossOver(population):\n",
    "    new_pop = []\n",
    "    for i in range(25):\n",
    "        parent1 = population[i-1].gene\n",
    "        parent2 = population[i].gene\n",
    "        random.seed(10)\n",
    "        crossover_point = randInt(4,5)\n",
    "        child1 = mutate(parent1[:crossover_point]+parent2[crossover_point:])\n",
    "        #child1 = mutate(parent2[0:1]+parent1[1:2]+parent2[2:4]+parent1[4:])\n",
    "        new_pop.append(child1)\n",
    "        child2 = mutate(parent2[:crossover_point]+parent1[crossover_point:])\n",
    "        #child2 = mutate(parent1[0:1]+parent2[1:2]+parent1[2:4]+parent2[4:])\n",
    "        new_pop.append(child2)\n",
    "    return new_pop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "mBz4TOlSm5pg"
   },
   "source": [
    "Finally the Mutate function to mutate some traits of child coming from parent so as to have the child with some uniqueness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3unK7-irm4dk"
   },
   "outputs": [],
   "source": [
    "def mutate(gene):\n",
    "    new_gene = []\n",
    "    for dna in gene:\n",
    "        if dna not in new_gene:\n",
    "            new_gene.append(dna)\n",
    "    for j in range(len(gene)):\n",
    "        if j not in new_gene:\n",
    "            new_gene.append(j)\n",
    "    random.seed(20)\n",
    "    left = randInt(0,3)\n",
    "    random.seed(30)\n",
    "    right = randInt(4,7)\n",
    "    new_gene[left], new_gene[right] = new_gene[right], new_gene[left]\n",
    "    return new_gene\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "h6E3F5fVngql"
   },
   "source": [
    "Main function to start the execution of the program\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 139
    },
    "colab_type": "code",
    "id": "4yE67XoqndA9",
    "outputId": "27d92541-3630-49a9-d9cc-5fda4fdedfd4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generation 1\n",
      "Generation 2\n",
      "Generation 3\n",
      "Generation 4\n",
      "Generation 5\n",
      "Generation 6\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[4, 6, 0, 3, 1, 7, 5, 2]"
      ]
     },
     "execution_count": 48,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def main():\n",
    "    population = initialPopulation()\n",
    "    flag, gene_pool = calcFitness(population)\n",
    "    G = 0\n",
    "    while True:\n",
    "        G += 1\n",
    "        print('Generation {}'.format(G))\n",
    "        if (flag):\n",
    "            break\n",
    "        new_population = crossOver(gene_pool)\n",
    "        flag, gene_pool = calcFitness(new_population)\n",
    "    return gene_pool\n",
    "\n",
    "main()\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "DSSUMMIT_N-Queens.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
